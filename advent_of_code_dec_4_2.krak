import io:*
import str:*
import vec:*
import set:*
import util:*

fun string_comp(left: ref str, right: ref str): bool {
    return left <= right
}
fun int_comp(left: ref int, right: ref int): bool {
    return left <= right
}

fun vec_max(v: ref vec<int>): pair<int, int> {
    var sorted = v.sorted(int_comp)
    var most = make_pair(0, 0)
    var run_start = 0
    for (var i = 0; i < sorted.size; i++;) {
        if sorted[i] != sorted[run_start] {
            if i - run_start > most.second {
                most = make_pair(sorted[run_start], i - run_start)
            }
            run_start = i
        }
    }
    return most
}

fun main(argc: int, argv: **char): int {
    /*println(read_file(str(argv[1])))*/
    /*println("that was unsorted")*/
    var a = read_file(str(argv[1])).lines().filter(fun(line: str): bool { return line != ""; })
    var sorted = a.sorted(string_comp)

    var asleep_minutes = map<int, vec<int>>()
    var current_guard = 0
    var current_start = 0
    for (var i = 0; i < sorted.size; i++;) {
        var spaced = sorted[i].split(" ")
        if spaced[2] == "Guard" {
            current_guard = string_to_num<int>(spaced[3].slice(1,-1))
        } else if spaced[2] == "falls" {
            current_start = string_to_num<int>(spaced[1].slice(3,-2))
        } else if spaced[2] == "wakes" {
            var end = string_to_num<int>(spaced[1].slice(3,-2))
            if !asleep_minutes.contains_key(current_guard) {
                asleep_minutes[current_guard] = vec<int>()
            }
            for (var j = current_start; j < end; j++;) {
                asleep_minutes[current_guard].add(j)
            }
        } else {
            println("Error: " + spaced[2])
        }
    }

    var max_minutes = asleep_minutes.associate(fun(id: int, mins: vec<int>): pair<int, pair<int, int>> {
        return make_pair(id, vec_max(mins))
    })
    var max_minute = make_pair(0, make_pair(0, 0))
    max_minutes.for_each(fun(guard: ref int, minute: ref pair<int, int>) {
        if max_minute.second.second < minute.second {
            max_minute = make_pair(guard, minute)
        }
    })

    println(str("max minute was guard ") + max_minute.first + " with minute " + max_minute.second.first + " num times " + max_minute.second.second)

    println(str("so the answer is ") + (max_minute.first * max_minute.second.first))

}
