import io:*
import str:*
import vec:*
import set:*
import util:*

fun string_comp(left: ref str, right: ref str): bool {
    return left <= right
}
fun int_comp(left: ref int, right: ref int): bool {
    return left < right
}

fun main(argc: int, argv: **char): int {
    /*println(read_file(str(argv[1])))*/
    /*println("that was unsorted")*/
    var a = read_file(str(argv[1])).lines().filter(fun(line: str): bool { return line != ""; })
    var sorted = a.sorted(string_comp)

    var asleep_minutes = map<int, vec<int>>()
    var current_guard = 0
    var current_start = 0
    for (var i = 0; i < sorted.size; i++;) {
        var spaced = sorted[i].split(" ")
        if spaced[2] == "Guard" {
            /*println("guard |" + spaced[3].slice(1,-1) + "| begins shift!")*/
            current_guard = string_to_num<int>(spaced[3].slice(1,-1))
        } else if spaced[2] == "falls" {
            /*println("guard falls asleep at |" + spaced[1].slice(3,-2) + "|")*/
            current_start = string_to_num<int>(spaced[1].slice(3,-2))
        } else if spaced[2] == "wakes" {
            /*println("guard wakes up at |" + spaced[1].slice(3,-2) + "|")*/
            var end = string_to_num<int>(spaced[1].slice(3,-2))
            if !asleep_minutes.contains_key(current_guard) {
                asleep_minutes[current_guard] = vec<int>()
            }
            for (var j = current_start; j < end; j++;) {
                asleep_minutes[current_guard].add(j)
            }
        } else {
            println("Error: " + spaced[2])
        }
    }

    var most_asleep = make_pair(0,0)

    asleep_minutes.for_each(fun(guard: ref int, minutes: ref vec<int>) {
        if minutes.size > most_asleep.second {
            most_asleep = make_pair(guard, minutes.size)
        }
    })
    println(str("most asleep is guard ") + most_asleep.first + " for " + most_asleep.second + " minutes")

    var sorted_minutes = asleep_minutes[most_asleep.first].sorted(int_comp)
    var most_minute = make_pair(0, 0)
    var run_start = 0
    for (var i = 0; i < sorted_minutes.size; i++;) {
        if sorted_minutes[i] != sorted_minutes[run_start] {
            if i - run_start > most_minute.second {
                most_minute = make_pair(sorted_minutes[run_start], i - run_start)
            }
            run_start = i
        }
    }
    println(str("most minute was ") + most_minute.first + " with " + most_minute.second)

    println(str("so the answer is ") + (most_asleep.first * most_minute.first))

}
